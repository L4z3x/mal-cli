name: CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, nightly]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.rust == 'nightly' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-
      
      - name: Build Debug
        run: |
          rustc --version
          make build
      
      - name: Run clippy
        run: |
          cargo clean
          make clippy
      
      - name: Build Release
        run: make build-release
      
      - name: Upload binary artifacts (Linux/macOS)
        if: matrix.rust == 'stable' && matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: mal-${{ matrix.os }}
          path: target/release/mal
      
      - name: Upload binary artifacts (Windows)
        if: matrix.rust == 'stable' && matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: mal-${{ matrix.os }}
          path: target/release/mal.exe

  build-linux-musl:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-musl
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-musl-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-musl-cargo-
      
      - name: Setup MUSL
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq musl-tools
      
      - name: Build Debug
        run: |
          make build-linux-musl-debug
          ./target/x86_64-unknown-linux-musl/debug/mal --version
      
      - name: Build Release
        run: |
          make build-linux-musl-release
          ./target/x86_64-unknown-linux-musl/release/mal --version
      
      - name: Upload MUSL binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mal-linux-musl-static
          path: target/x86_64-unknown-linux-musl/release/mal

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check formatting
        run: cargo fmt -- --check

  security-audit:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-audit-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run security audit
        run: make audit